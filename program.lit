
=tokenize
-def tokenize(t):
-	return t.split('##')

=generate
-def generate(tokens):
-	code=["def template(data):"]
-	indent="    "
-	stack=[]

-	def getvalue(x):
-		return 'getvalue(data,%s)'%(repr(x),)

-	for i in range(len(tokens)):
-		token=tokens[i]
-		print token
-		if i%2:
-			print token
-			if token.endswith('?'):
-				code.append("%selif compare(%s,%s):"%(indent[:-4],repr(token[:-1]),getvalue(stack[-1][1])))
-			elif '>' in token:
-				var,block=token.split('>')
-				code.append("%sblock_%s(data,%s)"%(indent,block,getvalue(var)))
-			elif '&' in token:
-				var,lst=token.split('&')
-				code.append("%sfor %s in %s:"%(indent,var,getvalue(lst)))
-				indent+='    '
-				stack.append(['for'])
-			elif '=' in token:
-				var,name=token.split('=')
-				code.append("%sdef block_%s(data,value):"%(indent,name))
-				stack.append(['block'])
-				indent+='    '
-				code.append("%sdata=data.copy()"%(indent,))
-				code.append("%sdata[%s]=value()"%(indent,repr(var)))
-			elif '?' in token:
-				value,var=token.split('?')
-				code.append("%sif compare(%s,%s):"%(indent,repr(value),getvalue(var)))
-				indent+='    '
-				stack.append(['if',var])
-			elif token=='*':
-				code.append("%selse:"%(indent[:-4],))
-			elif token=='':
-				print '/',stack[-1]
-				if stack[-1][0]!='choice':
-					indent=indent[:-4]
-				stack.pop()
-			else:
-				code.append("%soutput(%s)"%(indent,getvalue(token)))
-		else:
-			if token!='':
-				code.append("%soutput(%s)"%(indent,repr(token)))
-	return '\n'.join(code)

=defaults
-import sys
-def output(x):
-	sys.stdout.write(x)

-def getvalue(data,x):
-	return data[x]

-def compare(x,y):
-	if repr(x)==repr(y): return True
-	return False

=compile
-def compile(source):
-	g={'output':output,'getvalue':getvalue,'compare':compare}
-	l={}
-	exec(source,g,l)
-	return l['template']

=>beard.py
>tokenize
>generate
>defaults
>compile

-test="""
>example
-"""

-tokens=tokenize(test)
-template=generate(tokens)
-print template
-ctemplate=compile(template)
-print ctemplate
-print dir(ctemplate)

-print ctemplate({
-	'simple_var': 'Simple Variable',
-	'simple_cond_var': True,
-	'list_var': ['left','center','right','unknown']
-})

=example
-<html>
-<head>
-	<title>Hello, world</title>
-</head>
-<body>
-	<div>Simple variable substition ##simple_var##</div>
-
-	<div>
-		Simple boolean conditional
-		##true?simple_cond_var##
-			<div>Yes</div>
-		####
-		##false?simple_cond_var##
-			<div>no</div>
-		####
-	</div>
-
-	##cond_var=block##
-	<div>
-		Choice conditional
-		##left?cond_var##
-			<div style="text-align:left">Stay at Left</div>
-		##center?##
-			<div> style="text-align:center">Hold Center</div>
-		##right?##
-			<div> style="text-align:center">Lean to Right</div>
-		##*##
-			<div> style="text-align:center">Dunno what to do with ##cond_var##</div>
-		####
-	</div>
-	####
-
-	<div>
-		Iteration
-		##i&list_var##
-			##i>block##
-		####
-	</div>
-
-</body>
-</html>
