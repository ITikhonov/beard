
	<p style="font-style:italic">Cause every pirate should have a Beard.</p>
	<p style="text-align:right">&mdash; random pirate with beard</p>

		Beard template language.

	In the time of XMLHttpRequest need arise for templates to be used both
	on server-side and client-side.

	It's not hard when you use <s>same language</s>JavaScript on both sides.
	But what to do if you are not fond of Node.js?

	Well, you need a cross-language template engine!

	Ahoy! Here come the Beard! Instead of abandoning logic on a religious
	crusade for purity of ideas like our Mustache-wearing brothers, Beard
	design is dictated by practice.

	To support expressions (like in {% if x==1 or y in "abc" %}), you need
	a language. You can't resort to some simple half-assed hack by transforming it
	with clever regexp into host language expression (like in underscore), because
	you have at least TWO host languages.

	Writing expressive expression languages is a tricky thing. And you need to do
	it for each host language you going to support (so, at least twice).

	Beard avoids this by having no expressions. Beard is computation-less (well,
	Mustache is cleary too, not sure how and why they come up with their illogical
	motto).

	But what Beard has? Beard has conditional rendering, including switch,
	iteration over lists and parametrized subtemplates.

	It also allows to define computations in several host languages all in one
	template file. See? Beard don't try to force you into facial-futures related
	religion, the ultimate goal of Beard is to conserve your precious time.


		Syntax

	Core syntax of Beard is very simple. It's a beard made of two hashes (number
	or pound signs, depending on where are you from).

	Here is the beard:

	<p style="font-family: monospace; text-align: center">##</p>

	So when you want to instruct Beard to do something, you enclose command into two
	beards, two hashes each.

	To insert variable, named 'beard', use:

	<p style="font-family: monospace; text-align: center">##beard##</p>

=tokenize
-def tokenize(t):
-	return t.split('##')

		Commands

=generate
-def generate(gen,tokens):
-	stack=[]
-	code=None
-	for i in range(len(tokens)):
-		token=tokens[i]
-		if code is not None:
-			if i%2 and token=='':
-				if code: gen.icode(''.join(code))
-				code=None
-			else:
-				if type(code)==list : code.append(token)
-			continue

-		if i%2:

	Sometimes, beard clashes with template content. For example,
	you need to insert beard right after hash symbol. If you simply
	write

=example

-color: ###beard##;

	it will be treated like an attempt to insert '#beard' variable.
	Instead, use

=example

-##\##
	to insert offending hash sign.

=example
-color: ##\####beard##;

	Yeah, it looks ugly, hoping you won't encounter this much
	on your journey.

=generate
-			if token=='\\':
-				gen.ilit('#')

=example

-##@truth##
-	Truth is true!
-####

=example

-##@lie##
-	There is no place for lie!
-####

=generate
-			elif token.startswith('@'):
-				gen.iiftrue(token[1:])
-				stack.append(['if'])

=example

-##!truth##
-	Truth is not a lie!
-####

=example

-##!lie##
-	Here comes a lie.
-####

=generate
-			elif token.startswith('!'):
-				gen.iiffalse(token[1:])
-				stack.append(['if'])

=example-patching

-##{py##
-def block_testdata(data,value,**kw):
-	data['truth']=True
-	data['lie']=False
-	data['hamlet']='to be'
-	data['beard']='BeardBeard'
-	data['todo']=['Get milk','Pick up paycheck','Cash paycheck']
-	data['todo']=[{'no':i,'what':x} for i,x in enumerate(data['todo'],1)]
-####
-##{js##
-function block_testdata(data) {
-	data['truth']=true;
-	data['lie']=false;
-	data['hamlet']='to be';
-	data['beard']='BeardBeard';
-	data['todo']=['Get milk','Pick up paycheck','Cash paycheck'];
-	var i; for(i=0;i<data['todo'].length;i++) {
-		data['todo'][i]={no:i+1,what:data['todo'][i]};
-	}
-}
-####
-##>testdata##

=example

-##{py##
-def block_upper(data,value,output,**kw):
-	output(value.upper())
-####
-##{js##
-function block_upper(data,value,output) {
-	output(value.toUpperCase());
-}
-####

=generate
-			elif token.startswith('{'):
-				code=[] if gen.tag==token[1:] else False

=example

-##to be?hamlet##
-	To Be! :)
-##not to be?##
-	Not To Be :(
-##question?##
-	Is it a question?
-##*##
-	##hamlet## is not a question.
-####

=generate
-			elif token.endswith('?'):
-				gen.ielif(stack[-1][1],token[:-1])
-			elif '?' in token:
-				value,var=token.split('?')
-				gen.iif(var,value)
-				stack.append(['if',var])
-			elif token=='*':
-				gen.ielse()

=example

-##i=block##
-	<div>Repeat, now with ##i##.</div>
-####

-##beard>block##
-##hamlet>block##

-Do you remember that block_upper? Here: ##hamlet>upper##

=generate
-			elif '=' in token:
-				var,name=token.split('=')
-				gen.iblock(name,var)
-				stack.append(['block',var])
-			elif '>' in token:
-				var,block=token.split('>')
-				gen.icall(block,var)


=example

-<div>
-##item:todo##
-	<div>##item.no##) ##item.what##</div>
-####
-</div>

=generate
-			elif ':' in token:
-				var,lst=token.split(':')
-				gen.iiter(var,lst)
-				stack.append(['for',var])
-			elif token=='':
-				gen.pop(stack.pop())
-			else:
-				gen.ivar(token)
-		else:
-			if token!='': gen.ilit(token)
-	return gen.text()


=jsgenerator
-class JavascriptGenerator(object):
-	def __init__(_,name):
-		_.tag='js'
-		_.code=[
-			"Beard.template[%s]=function(data,value,output,getvalue,compare) {"%(repr(name))
-		]
-		_.indent="    "

-	def c(_,p,*args):
-		_.code.append(_.indent+(p%args))

-	def c0(_,p,*args):
-		_.code.append(_.indent[:-4]+(p%args))

-	def text(_):
-		return '\n'.join(_.code+['}'])

-	def getvalue(_,x):
-		return 'getvalue(data,%s)'%(repr(x),)

-	def icall(_,block,var):
-		_.c("(%s?%s:block_%s)(data,%s,output,getvalue,compare);",_.getvalue(block),_.getvalue(block),block,_.getvalue(var))

-	def ielif(_,var,value):
-		_.c0("} else if(compare(%s,%s)) {",repr(value),_.getvalue(var))

-	def iiter(_,var,lst):
-		_.c("for(var arr=%s,idx=0;idx<arr.length;idx++) {",_.getvalue(lst))
-		_.indent+='    '
-		_.c("var hold=data[%s]; ",repr(var))
-		_.c("data[%s]=arr[idx]; ",repr(var))

-	def iblock(_,name,var):
-		_.c("function block_%s(data,value) {",name)
-		_.indent+='    '
-		_.c("var hold=data[%s];",repr(var))
-		_.c("data[%s]=value;",repr(var))

-	def iif(_,var,value):
-		_.c("if(compare(%s,%s)) {",repr(value),_.getvalue(var))
-		_.indent+='    '

-	def iiftrue(_,var):
-		_.c("if(%s) {",_.getvalue(var))
-		_.indent+='    '

-	def iiffalse(_,var):
-		_.c("if(!%s) {",_.getvalue(var))
-		_.indent+='    '

-	def ielse(_):
-		_.c0("} else {")

-	def ivar(_,var):
-		_.c("output(%s);",_.getvalue(var))

-	def ilit(_,text):
-		_.c("output(%s);",repr(text))

-	def icode(_,code):
-		_.code.insert(1,code)		

-	def pop(_,what):
-		if what[0]=='for':_.c("if(hold!=undefined) data[%s]=hold;",repr(what[1]))
-		elif what[0]=='block': _.c("if(hold!=undefined) data[%s]=hold",repr(what[1]))
-		_.indent=_.indent[:-4]
-		_.c("}")



=generator
-class PythonGenerator(object):
-	def __init__(_):
-		_.nest=0
-		_.tag='py'
-		_.code=[
-			"import beard",
-			"def template(data,value=None,output=beard.output,getvalue=beard.getvalue,compare=beard.compare):"
-		]
-		_.indent="    "

-	def c(_,p,*args):
-		_.code.append(_.indent+(p%args))

-	def c0(_,p,*args):
-		_.code.append(_.indent[:-4]+(p%args))

-	def text(_):
-		return '\n'.join(_.code)

-	def getvalue(_,x):
-		return 'getvalue(data,%s)'%(repr(x),)

-	def icall(_,block,var):
-		_.c("(%s if %s else block_%s)(data,%s,output=output,getvalue=getvalue,compare=compare)",_.getvalue(block),_.getvalue(block),block,_.getvalue(var))

-	def ielif(_,var,value):
-		_.c0("elif compare(%s,%s):",repr(value),_.getvalue(var))

-	def iiter(_,var,lst):
-		_.c("hold%u=data.get(%s)",_.nest,repr(var));
-		_.c("for var%u in %s:",_.nest,_.getvalue(lst))
-		_.indent+='    '
-		_.c("data[%s]=var%u",repr(var),_.nest);
-		_.nest+=1

-	def iblock(_,name,var):
-		_.c("def block_%s(data,value,**kw):",name)
-		_.indent+='    '
-		_.c("hold=data.get(%s)",repr(var))
-		_.c("data[%s]=value",repr(var))

-	def iif(_,var,value):
-		_.c("if compare(%s,%s):",repr(value),_.getvalue(var))
-		_.indent+='    '

-	def iiftrue(_,var):
-		_.c("if %s:",_.getvalue(var))
-		_.indent+='    '

-	def iiffalse(_,var):
-		_.c("if not %s:",_.getvalue(var))
-		_.indent+='    '

-	def ielse(_):
-		_.c0("else:")

-	def ivar(_,var):
-		_.c("output(%s)",_.getvalue(var))

-	def ilit(_,text):
-		_.c("output(%s)",repr(text))

-	def icode(_,code):
-		_.code.insert(1,code)		

-	def pop(_,what):
-		if what[0]=='for':
-			_.nest-=1
-			_.c("if hold%u is not None: data[%s]=hold%u",_.nest,repr(what[1]),_.nest)
-		elif what[0]=='block':
-			_.c("if hold is not None: data[%s]=hold",repr(what[1]))
-		_.indent=_.indent[:-4]

=defaults
-import sys
-def output(x):
-	if x is not None:
-		sys.stdout.write(str(x))

-def getvalue(data,x):
-	vs=x.split('.')
-	v=data
-	for y in vs:
-		v=v.get(y)
-	return v

-def compare(x,y):
-	if repr(x)==repr(y): return True
-	return False

=compile
-def compile(source):
-	tokens=tokenize(source)
-	template=generate(PythonGenerator(),tokens)
-	g={}
-	l={}
-	exec(template,g,l)
-	compiled=l['template']
-	compiled.func_globals.update(l)
-	return compiled

=render
-def render(template,data):
-	s=[]
-	def output(x):
-		if x is not None: s.append(str(x))
-	template(data,output=output)
-	return ''.join(s)

=>beard/beard.py
>tokenize
>generator
>jsgenerator
>generate
>defaults
>render
>compile

-def main(argv):
-	if argv[1]=='--test': return test()
-	text=open(argv[1]).read()
-	tokens=tokenize(text)
-	name=argv[1][:-6] if argv[1].endswith('.beard') else argv[1]

-	f=open(name+'.py','w')
-	template=generate(PythonGenerator(),tokens)
-	f.write(template)
-	f.close()

-	f=open(name+'.js','w')
-	template=generate(JavascriptGenerator(name),tokens)
-	f.write(template)
-	f.close()

-def test():
-	from sys import argv
-	from importlib import import_module
-	m=import_module(argv[2])
-	
-	m.template({
-		'simple_var': 'Simple Variable',
-		'simple_cond_var': True,
-		'list_var': ['left','center','right','unknown'],
-		'ext_block': lambda data,x,output,**kw: output("External block received '%s' value"%(x,)),
-		'nestlist_var': [{'cond':'left'},{'cond':'center'},{'cond':'right'},{'cond':'unknown'}],
-	})

-if __name__=='__main__':
-	from sys import argv
-	main(argv)


=>beard.js
-Beard={
-	template: {},
-	output: function (x) { if(x!=undefined) putstr(x); },
-
-	getvalue: function(data,x) {
-		var vs=x.split('.');
-		var v=data;
-		var i;
-		for(i=0;i<vs.length;i++) {
-			y=v[vs[i]];
-			if(y==undefined) return;
-			v=y;
-		}
-		return v;
-	},
-
-	compare: function(x,y) { return x==y; },
-
-	render: function(name,data) {
-		Beard.template[name](data,undefined,this.output,this.getvalue,this.compare);
-	}
-};

=>test.js
-load("beard.js")
-load("example.js")

-Beard.render('example',{
-	'simple_var': 'Simple Variable',
-	'simple_cond_var': true,
-	'list_var': ['left','center','right','unknown'],
-	'ext_block': function(data,x,output) { output("External block received '"+x+"' value"); },
-	'nestlist_var': [{'cond':'left'},{'cond':'center'},{'cond':'right'},{'cond':'unknown'}],
-});



=>example.beard
>example-patching
>example

=>example2.beard
-<html>
-<head>
-	<title>Hello, world</title>
-</head>
-<body>
-	<div>Simple variable substition ##simple_var##</div>
-
-	<div>
-		Simple boolean conditional
-		##@simple_cond_var##
-			<div>Yes</div>
-		####
-		##!simple_cond_var##
-			<div>no</div>
-		####
-	</div>

-	##cond_var=block##
-	<div>
-		Choice conditional
-		##left?cond_var##
-			<div style="text-align:left">Stay at Left</div>
-		##center?##
-			<div> style="text-align:center">Hold Center</div>
-		##right?##
-			<div> style="text-align:center">Lean to Right</div>
-		##*##
-			<div> style="text-align:center">Dunno what to do with '##cond_var##'</div>
-		####
-	</div>
-	####

-	<div>
-		Iteration
-		##i:list_var##
-			##i>block##
-		####
-	</div>

-	<div>
-		External blocks
-		##i:list_var##
-			##i>ext_block##
-		####
-	</div>

-	##v=nest_block##
-	<div>
-		Choice conditional on ##v.cond##.
-		##left?v.cond##
-			<div style="text-align:left">Stay at Left</div>
-		##center?##
-			<div> style="text-align:center">Hold Center</div>
-		##right?##
-			<div> style="text-align:center">Lean to Right</div>
-		##*##
-			<div> style="text-align:center">Dunno what to do with '##v.cond##'</div>
-		####
-	</div>
-	####
-	<div>
-		Dot-notation
-		##i:nestlist_var##
-			##i>nest_block##
-		####
-	</div>

-</body>
-</html>

=>beard/__init__.py
-from .beard import render,compile,main,output,getvalue,compare

=>beard/django_loader.py
-from django.template.loaders import app_directories
-from django.template.base import TemplateDoesNotExist
-import beard

-class Template:
-   def __init__(self, source):
-       self.template = beard.compile(source)
-       
-   def render(self, context):
-       context_dict = {}
-       for d in context.dicts:
-           context_dict.update(d)
-
-       return beard.render(self.template, context_dict)

-class Loader(app_directories.Loader):
-    is_usable = True

-    def load_template_source(self, template_name, template_dirs=None):
-        if not template_name.endswith('.beard'): raise TemplateDoesNotExist(template_name)
-        return super(Loader, self).load_template_source(template_name, template_dirs)

-    def load_template(self, template_name, template_dirs=None):
-        source, origin = self.load_template_source(template_name, template_dirs)
-        template = Template(source)
-        return template, origin



