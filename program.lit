
=tokenize
-def tokenize(t):
-	return t.split('##')

=generator
-class PythonGenerator(object):
-	def __init__(_):
-		pass

-	def getvalue(_,x):
-		if x in _.shadows:
-			return 'var%s'%(_.shadows.index(x),)
-		return 'getvalue(data,%s)'%(repr(x),)

-	def ielif(_,var,value):
-		_.code.append("%selif compare(%s,%s):"%(_.indent[:-4],_.getvalue(var),repr(value),))

=generate
-def generate(tokens):
-	code=["def template(data,value=None):"]
-	stack=[]
-	shadows=[]


-	gen=PythonGenerator()
-	gen.stack=stack
-	gen.code=code
-	gen.indent="    "
-	gen.shadows=shadows

-	def getvalue(x):
-		return gen.getvalue(x)


-	for i in range(len(tokens)):
-		token=tokens[i]
-		print token
-		if i%2:
-			print token
-			if token.endswith('?'):
-				gen.ielif(stack[-1][1],repr(token[:-1]))
-			elif '>' in token:
-				var,block=token.split('>')
-				code.append("%s(%s if %s else block_%s)(data,%s)"%(gen.indent,getvalue(block),getvalue(block),block,getvalue(var)))
-			elif ':' in token:
-				var,lst=token.split(':')
-				code.append("%sfor var%u in %s:"%(gen.indent,len(shadows),getvalue(lst)))
-				shadows.insert(0,var)
-				gen.indent+='    '
-				stack.append(['for'])
-			elif '=' in token:
-				var,name=token.split('=')
-				code.append("%sdef block_%s(data,value):"%(gen.indent,name))
-				stack.append(['block'])
-				gen.indent+='    '
-				code.append("%sdata=data.copy()"%(gen.indent,))
-				code.append("%sdata[%s]=value"%(gen.indent,repr(var)))
-			elif '?' in token:
-				value,var=token.split('?')
-				code.append("%sif compare(%s,%s):"%(gen.indent,repr(value),getvalue(var)))
-				gen.indent+='    '
-				stack.append(['if',var])
-			elif token.startswith('@'):
-				code.append("%sif %s:"%(gen.indent,getvalue(token[1:])))
-				gen.indent+='    '
-				stack.append(['if'])
-			elif token.startswith('!'):
-				code.append("%sif not %s:"%(gen.indent,getvalue(token[1:])))
-				gen.indent+='    '
-				stack.append(['if'])
-			elif token=='*':
-				code.append("%selse:"%(gen.indent[:-4],))
-			elif token=='':
-				print '/',stack[-1]
-				if stack[-1][0]=='for':
-					shadows.pop(0)
-				gen.indent=gen.indent[:-4]
-				stack.pop()
-			else:
-				code.append("%soutput(%s)"%(gen.indent,getvalue(token)))
-		else:
-			if token!='':
-				code.append("%soutput(%s)"%(gen.indent,repr(token)))
-	return '\n'.join(code)

=defaults
-import sys
-def output(x):
-	if x is not None:
-		sys.stdout.write(str(x))

-def getvalue(data,x):
-	vs=x.split('.')
-	v=data
-	for y in vs:
-		v=v.get(y)
-	return v

-def compare(x,y):
-	if repr(x)==repr(y): return True
-	return False

=compile
-def compile(source):
-	g={'output':output,'getvalue':getvalue,'compare':compare}
-	l={}
-	exec(source,g,l)
-	return l['template']

=>beard.py
>tokenize
>generator
>generate
>defaults
>compile

-test="""
>example
-"""

-tokens=tokenize(test)
-template=generate(tokens)
-print template
-ctemplate=compile(template)
-print ctemplate
-print dir(ctemplate)

-print ctemplate({
-	'simple_var': 'Simple Variable',
-	'simple_cond_var': True,
-	'list_var': ['left','center','right','unknown'],
-	'ext_block': lambda data,x: output("External block received '%s' value"%(x,)),
-	'nestlist_var': [{'cond':'left'},{'cond':'center'},{'cond':'right'},{'cond':'unknown'}],
-})

=example
-<html>
-<head>
-	<title>Hello, world</title>
-</head>
-<body>
-	<div>Simple variable substition ##simple_var##</div>
-
-	<div>
-		Simple boolean conditional
-		##@simple_cond_var##
-			<div>Yes</div>
-		####
-		##!simple_cond_var##
-			<div>no</div>
-		####
-	</div>

-	##cond_var=block##
-	<div>
-		Choice conditional
-		##left?cond_var##
-			<div style="text-align:left">Stay at Left</div>
-		##center?##
-			<div> style="text-align:center">Hold Center</div>
-		##right?##
-			<div> style="text-align:center">Lean to Right</div>
-		##*##
-			<div> style="text-align:center">Dunno what to do with '##cond_var##'</div>
-		####
-	</div>
-	####

-	<div>
-		Iteration
-		##i:list_var##
-			##i>block##
-		####
-	</div>

-	<div>
-		External blocks
-		##i:list_var##
-			##i>ext_block##
-		####
-	</div>

-	##v=nest_block##
-	<div>
-		Choice conditional on ##v.cond##.
-		##left?v.cond##
-			<div style="text-align:left">Stay at Left</div>
-		##center?##
-			<div> style="text-align:center">Hold Center</div>
-		##right?##
-			<div> style="text-align:center">Lean to Right</div>
-		##*##
-			<div> style="text-align:center">Dunno what to do with '##v.cond##'</div>
-		####
-	</div>
-	####
-	<div>
-		Dot-notation
-		##i:nestlist_var##
-			##i>nest_block##
-		####
-	</div>

-</body>
-</html>
